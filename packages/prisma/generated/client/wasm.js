
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  idNumber: 'idNumber',
  paystackSplitGroupId: 'paystackSplitGroupId',
  paystackSubAccountId: 'paystackSubAccountId',
  paystackCustomerId: 'paystackCustomerId',
  paystackSubscriptionId: 'paystackSubscriptionId',
  paystackSubscriptionStatus: 'paystackSubscriptionStatus',
  subscriptionPlanCode: 'subscriptionPlanCode',
  subscriptionAmount: 'subscriptionAmount',
  subscriptionCurrency: 'subscriptionCurrency',
  subscriptionInterval: 'subscriptionInterval',
  nextPaymentDate: 'nextPaymentDate',
  subscriptionCreatedAt: 'subscriptionCreatedAt',
  subscriptionUpdatedAt: 'subscriptionUpdatedAt',
  lastPaymentFailure: 'lastPaymentFailure',
  paymentRetryCount: 'paymentRetryCount',
  state: 'state',
  zip: 'zip',
  onboardingCompleted: 'onboardingCompleted',
  businessName: 'businessName',
  countryCode: 'countryCode',
  numberOfProperties: 'numberOfProperties',
  numberOfUnits: 'numberOfUnits',
  phone: 'phone'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  landlordId: 'landlordId',
  dateOfBirth: 'dateOfBirth',
  tenantEmergencyContact: 'tenantEmergencyContact',
  tenantIncome: 'tenantIncome',
  additionalEmails: 'additionalEmails',
  additionalPhones: 'additionalPhones',
  emergencyContacts: 'emergencyContacts',
  vehicles: 'vehicles',
  avatarUrl: 'avatarUrl',
  fullName: 'fullName',
  paystackCustomerId: 'paystackCustomerId'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  zip: 'zip',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  imageUrl: 'imageUrl',
  propertyStatus: 'propertyStatus',
  propertyType: 'propertyType',
  amenities: 'amenities',
  countryCode: 'countryCode',
  features: 'features',
  landlordId: 'landlordId'
};

exports.Prisma.UnitScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  bathrooms: 'bathrooms',
  bedrooms: 'bedrooms',
  deposit: 'deposit',
  marketRent: 'marketRent',
  sqmt: 'sqmt'
};

exports.Prisma.LeaseScalarFieldEnum = {
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  rent: 'rent',
  deposit: 'deposit',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rentDueCurrency: 'rentDueCurrency',
  unitId: 'unitId',
  automaticInvoice: 'automaticInvoice',
  invoiceCycle: 'invoiceCycle',
  leaseType: 'leaseType',
  paystackPlanCode: 'paystackPlanCode',
  paystackSubscriptionCode: 'paystackSubscriptionCode',
  paystackAuthorizationUrl: 'paystackAuthorizationUrl',
  paystackReference: 'paystackReference'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  leaseId: 'leaseId',
  description: 'description',
  dueAmount: 'dueAmount',
  category: 'category',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paystackId: 'paystackId',
  dueDate: 'dueDate',
  lineItems: 'lineItems',
  landlordId: 'landlordId',
  tenantId: 'tenantId',
  invoiceNumber: 'invoiceNumber',
  paymentRequestUrl: 'paymentRequestUrl',
  recurringBillableId: 'recurringBillableId'
};

exports.Prisma.RecurringBillableScalarFieldEnum = {
  id: 'id',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  description: 'description',
  amount: 'amount',
  category: 'category',
  cycle: 'cycle',
  nextInvoiceAt: 'nextInvoiceAt',
  isActive: 'isActive',
  leaseId: 'leaseId',
  tenantId: 'tenantId',
  propertyId: 'propertyId'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  leaseId: 'leaseId',
  description: 'description',
  amountPaid: 'amountPaid',
  referenceId: 'referenceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  invoiceId: 'invoiceId'
};

exports.Prisma.TenantLeaseScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  leaseId: 'leaseId'
};

exports.Prisma.MaintenanceRequestScalarFieldEnum = {
  id: 'id',
  leaseId: 'leaseId',
  description: 'description',
  status: 'status',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  ownerId: 'ownerId',
  tenantId: 'tenantId',
  propertyId: 'propertyId',
  leaseId: 'leaseId',
  invoiceId: 'invoiceId',
  maintenanceRequestId: 'maintenanceRequestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  size: 'size',
  type: 'type'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SubscriptionPlanStatus = exports.$Enums.SubscriptionPlanStatus = {
  ACTIVE: 'ACTIVE',
  NON_RENEWING: 'NON_RENEWING',
  ATTENTION: 'ATTENTION',
  DISABLED: 'DISABLED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PropertyStatus = exports.$Enums.PropertyStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  SINGLE_UNIT: 'SINGLE_UNIT',
  MULTI_UNIT: 'MULTI_UNIT'
};

exports.LeaseStatus = exports.$Enums.LeaseStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  EXPIRED: 'EXPIRED'
};

exports.InvoiceCycle = exports.$Enums.InvoiceCycle = {
  MONTHLY: 'MONTHLY'
};

exports.LeaseTermType = exports.$Enums.LeaseTermType = {
  MONTHLY: 'MONTHLY',
  FIXED_TERM: 'FIXED_TERM'
};

exports.InvoiceCategory = exports.$Enums.InvoiceCategory = {
  DEPOSIT: 'DEPOSIT',
  RENT: 'RENT',
  MAINTENANCE: 'MAINTENANCE',
  UTILITY_BILL: 'UTILITY_BILL',
  LEVY: 'LEVY',
  RATES_AND_TAXES: 'RATES_AND_TAXES',
  SERVICE_CHARGE: 'SERVICE_CHARGE',
  WATER_ELECTRICITY: 'WATER_ELECTRICITY',
  OTHER: 'OTHER'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  OVERDUE: 'OVERDUE',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  DRAFT: 'DRAFT'
};

exports.MaintenanceRequestStatus = exports.$Enums.MaintenanceRequestStatus = {
  PENDING: 'PENDING',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  CANCELLED: 'CANCELLED',
  COMPLETE: 'COMPLETE'
};

exports.MaintenanceRequestPriority = exports.$Enums.MaintenanceRequestPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Tenant: 'Tenant',
  Property: 'Property',
  Unit: 'Unit',
  Lease: 'Lease',
  Invoice: 'Invoice',
  RecurringBillable: 'RecurringBillable',
  Transactions: 'Transactions',
  TenantLease: 'TenantLease',
  MaintenanceRequest: 'MaintenanceRequest',
  File: 'File'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
