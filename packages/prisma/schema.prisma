generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

generator triggerClient {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id                         String                  @id
  name                       String
  email                      String                  @unique
  emailVerified              Boolean                 @default(false)
  image                      String?
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
  addressLine1               String?
  addressLine2               String?
  city                       String?
  idNumber                   String?
  paystackSplitGroupId       String?
  paystackSubAccountId       String?
  paystackCustomerId         String?
  paystackSubscriptionId     String?
  paystackSubscriptionStatus SubscriptionPlanStatus?
  subscriptionPlanCode       String? // PLN_xxx
  subscriptionAmount         Int? // in kobo/cents
  subscriptionCurrency       String? // NGN, ZAR, etc.
  subscriptionInterval       String? // monthly, yearly, etc.
  nextPaymentDate            DateTime?
  subscriptionCreatedAt      DateTime?
  subscriptionUpdatedAt      DateTime?
  lastPaymentFailure         String? // Last failure reason
  paymentRetryCount          Int?                    @default(0)
  state                      String?
  zip                        String?
  onboardingCompleted        Boolean                 @default(false)
  businessName               String?
  countryCode                String?                 @default("ZA")
  numberOfProperties         Int?
  numberOfUnits              Int?
  phone                      String?                 @unique
  accounts                   Account[]
  property                   Property[]
  sessions                   Session[]
  tenant                     Tenant[]
  Invoice                    Invoice[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Tenant {
  id                     String              @id @default(uuid())
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  email                  String
  firstName              String
  lastName               String
  phone                  String
  landlordId             String
  dateOfBirth            DateTime?           @db.Date
  tenantEmergencyContact Json?
  tenantIncome           Json?
  additionalEmails       String[]
  additionalPhones       String[]
  emergencyContacts      Json?
  vehicles               Json?
  avatarUrl              String?
  fullName               String?
  paystackCustomerId     String?
  files                  File[]
  Invoice                Invoice[]
  landlord               User                @relation(fields: [landlordId], references: [id])
  tenantLease            TenantLease[]
  recurringBillable      RecurringBillable[]

  @@unique([landlordId, email])
  @@unique([landlordId, phone])
  @@map("tenant")
}

model Property {
  id                String              @id @default(uuid())
  name              String
  addressLine1      String
  addressLine2      String?
  city              String
  state             String
  zip               String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  imageUrl          String?
  propertyStatus    PropertyStatus      @default(ACTIVE)
  propertyType      PropertyType        @default(MULTI_UNIT)
  amenities         String[]
  countryCode       String              @default("ZA")
  features          String[]
  landlordId        String
  files             File[]
  landlord          User                @relation(fields: [landlordId], references: [id])
  unit              Unit[]
  recurringBillable RecurringBillable[]

  @@map("property")
}

model Unit {
  id         String   @id @default(uuid())
  propertyId String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bathrooms  Float    @default(1)
  bedrooms   Int      @default(1)
  deposit    Float    @default(0)
  marketRent Float    @default(0)
  sqmt       Float    @default(0)
  lease      Lease[]
  property   Property @relation(fields: [propertyId], references: [id])

  @@map("unit")
}

model Lease {
  id                       String               @id @default(uuid())
  startDate                DateTime             @db.Date
  endDate                  DateTime?            @db.Date
  rent                     Float
  deposit                  Float
  status                   LeaseStatus
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  rentDueCurrency          String
  unitId                   String?
  automaticInvoice         Boolean              @default(false)
  invoiceCycle             InvoiceCycle         @default(MONTHLY)
  leaseType                LeaseTermType
  paystackPlanCode         String?
  paystackSubscriptionCode String?
  paystackAuthorizationUrl String?
  paystackReference        String?
  File                     File[]
  invoice                  Invoice[]
  unit                     Unit?                @relation(fields: [unitId], references: [id])
  maintenanceRequest       MaintenanceRequest[]
  tenantLease              TenantLease[]
  transactions             Transactions[]
  recurringBillable        RecurringBillable[]

  @@map("lease")
}

model Invoice {
  id                  String             @id @default(uuid())
  leaseId             String?
  description         String
  dueAmount           Float
  category            InvoiceCategory
  status              InvoiceStatus
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  paystackId          String
  dueDate             DateTime?          @db.Date
  lineItems           Json?
  landlordId          String
  tenantId            String
  invoiceNumber       String             @default("")
  File                File[]
  paymentRequestUrl   String             @default("")
  lease               Lease?             @relation(fields: [leaseId], references: [id])
  tenant              Tenant             @relation(fields: [tenantId], references: [id])
  transactions        Transactions[]
  recurringBillable   RecurringBillable? @relation(fields: [recurringBillableId], references: [id])
  recurringBillableId String?
  landlord            User               @relation(fields: [landlordId], references: [id])

  @@map("invoice")
}

model RecurringBillable {
  id            String          @id @default(uuid())
  startDate     DateTime        @db.Date
  endDate       DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  description   String
  amount        Float
  category      InvoiceCategory
  cycle         InvoiceCycle    @default(MONTHLY)
  nextInvoiceAt DateTime
  isActive      Boolean         @default(true)
  leaseId       String?
  tenantId      String
  lease         Lease?          @relation(fields: [leaseId], references: [id])
  tenant        Tenant          @relation(fields: [tenantId], references: [id])
  invoice       Invoice[] // Invoices generated from this recurring rule
  property      Property?       @relation(fields: [propertyId], references: [id])
  propertyId    String?

  @@map("recurring_billable")
}

model Transactions {
  id          String   @id @default(uuid())
  leaseId     String?
  description String
  amountPaid  Float
  referenceId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoiceId   String?
  invoice     Invoice? @relation(fields: [invoiceId], references: [id])
  lease       Lease?   @relation(fields: [leaseId], references: [id])

  @@map("transaction")
}

model TenantLease {
  id       String @id @default(uuid())
  tenantId String
  leaseId  String
  lease    Lease  @relation(fields: [leaseId], references: [id])
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@map("tenant_lease")
}

model MaintenanceRequest {
  id          String                     @id @default(uuid())
  leaseId     String
  description String?
  status      MaintenanceRequestStatus?
  priority    MaintenanceRequestPriority
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  File        File[]
  lease       Lease                      @relation(fields: [leaseId], references: [id])

  @@map("maintenance_request")
}

model File {
  id                   String              @id @default(uuid())
  name                 String
  url                  String
  ownerId              String
  tenantId             String?
  propertyId           String?
  leaseId              String?
  invoiceId            String?
  maintenanceRequestId String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  size                 Int?
  type                 String?
  invoice              Invoice?            @relation(fields: [invoiceId], references: [id])
  lease                Lease?              @relation(fields: [leaseId], references: [id])
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
  property             Property?           @relation(fields: [propertyId], references: [id])
  tenant               Tenant?             @relation(fields: [tenantId], references: [id])

  @@map("file")
}

enum InvoiceCycle {
  MONTHLY
}

enum LeaseTermType {
  MONTHLY
  FIXED_TERM
}

enum PropertyType {
  SINGLE_UNIT
  MULTI_UNIT
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
  OVERDUE
  PARTIALLY_PAID
  DRAFT
}

enum LeaseStatus {
  PENDING
  ACTIVE
  INACTIVE
  EXPIRED
}

enum TenantIncomeType {
  SALARY
  SELF_EMPLOYED
  UNEMPLOYED
  RETIRED
  DISABILITY
  OTHER
}

enum TenantRelationship {
  SPOUSE
  PARENT
  GRANDPARENT
  GRANDCHILD
  SIBLING
  CHILD
  AUNT_UNCLE
  COUSIN
  NEPHEW_NIECE
  OTHER
}

enum MaintenanceRequestStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  CANCELLED
  COMPLETE
}

enum MaintenanceRequestPriority {
  LOW
  MEDIUM
  HIGH
}

enum InvoiceCategory {
  DEPOSIT
  RENT
  MAINTENANCE
  UTILITY_BILL
  LEVY
  RATES_AND_TAXES
  SERVICE_CHARGE
  WATER_ELECTRICITY
  OTHER
}

enum PropertyAmenity {
  BBQ_GRILL
  POOL
  FITNESS_CENTER
  PET_FRIENDLY
  GYM
  LAUNDRY
  PARKING
  STORAGE
}

enum PropertyFeature {
  ALARM_SYSTEM
  AIR_CONDITIONING
  WIFI_INTERNET
  CABLE_TV
  DISHWASHER
  DRYER
  FRIDGE
  MICROWAVE
  OVEN
  STOVE
  FIREPLACE
}

enum SubscriptionPlanStatus {
  ACTIVE
  NON_RENEWING
  ATTENTION
  DISABLED
  COMPLETED
  CANCELLED
}
