/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/transaction/initialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initialize Transaction
         * @description Create a new transaction
         */
        post: operations["transaction_initialize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/verify/{reference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify Transaction
         * @description Verify a previously initiated transaction using it's reference
         */
        get: operations["transaction_verify"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Transactions
         * @description List transactions that has occurred on your integration
         */
        get: operations["transaction_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Transaction
         * @description Fetch a transaction to get its details
         */
        get: operations["transaction_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/timeline/{id_or_reference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Transaction Timeline
         * @description Get the details about the lifecycle of a transaction from initiation to completion
         */
        get: operations["transaction_timeline"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/totals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Transaction Totals
         * @description Get the total amount of all transactions
         */
        get: operations["transaction_totals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export Transactions */
        get: operations["transaction_download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/charge_authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Charge Authorization */
        post: operations["transaction_chargeAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/check_authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check Authorization */
        post: operations["transaction_checkAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/partial_debit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Partial Debit */
        post: operations["transaction_partialDebit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/{id}/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Transaction Event */
        get: operations["transaction_event"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction/{id}/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Transaction Session */
        get: operations["transaction_session"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/split": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List/Search Splits */
        get: operations["split_list"];
        put?: never;
        /** Create Split */
        post: operations["split_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/split/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Split */
        get: operations["split_fetch"];
        /** Update Split */
        put: operations["split_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/split/{id}/subaccount/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Subaccount to Split */
        post: operations["split_addSubaccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/split/{id}/subaccount/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove Subaccount from split */
        post: operations["split_removeSubaccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Customers
         * @description List customers on your integration
         */
        get: operations["customer_list"];
        put?: never;
        /** Create Customer */
        post: operations["customer_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Customer */
        get: operations["customer_fetch"];
        /** Update Customer */
        put: operations["customer_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/set_risk_action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * White/blacklist Customer
         * @description Set customer's risk action by whitelisting or blacklisting the customer
         */
        post: operations["customer_riskAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/deactivate_authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate Authorization
         * @description Deactivate a customer's card
         */
        post: operations["customer_deactivateAuthorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/{code}/identification": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Customer
         * @description Validate a customer's identity
         */
        post: operations["customer_validate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Dedicated Accounts */
        get: operations["dedicatedAccount_list"];
        put?: never;
        /** Create Dedicated Account */
        post: operations["dedicatedAccount_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        /** Fetch Dedicated Account */
        get: operations["dedicatedAccount_fetch"];
        put?: never;
        post?: never;
        /** Deactivate Dedicated Account */
        delete: operations["dedicatedAccount_deactivate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account/available_providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Bank Providers */
        get: operations["dedicatedAccount_availableProviders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dedicated_account/split": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Split Dedicated Account Transaction */
        post: operations["dedicatedAccount_addSplit"];
        /** Remove Split from Dedicated Account */
        delete: operations["dedicatedAccount_removeSplit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subaccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Subaccounts */
        get: operations["subaccount_list"];
        put?: never;
        /** Create Subaccount */
        post: operations["subaccount_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subaccount/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Subaccount */
        get: operations["subaccount_fetch"];
        /** Update Subaccount */
        put: operations["subaccount_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Plans */
        get: operations["plan_list"];
        put?: never;
        /** Create Plan */
        post: operations["plan_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plan/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Plan */
        get: operations["plan_fetch"];
        /** Update Plan */
        put: operations["plan_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Subscriptions */
        get: operations["subscription_list"];
        put?: never;
        /** Create Subscription */
        post: operations["subscription_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Subscription */
        get: operations["subscription_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable Subscription */
        post: operations["subscription_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable Subscription */
        post: operations["subscription_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/{code}/manage/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate Update Subscription Link */
        get: operations["subscription_manageLink"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription/{code}/manage/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Update Subscription Link */
        post: operations["subscription_manageEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Products */
        get: operations["product_list"];
        put?: never;
        /** Create Product */
        post: operations["product_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Product */
        get: operations["product_fetch"];
        /** Update product */
        put: operations["product_update"];
        post?: never;
        /** Delete Product */
        delete: operations["product_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Pages */
        get: operations["page_list"];
        put?: never;
        /** Create Page */
        post: operations["page_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/page/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Page */
        get: operations["page_fetch"];
        /** Update Page */
        put: operations["page_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/page/check_slug_availability/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        /** Check Slug Availability */
        get: operations["page_checkSlugAvailability"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/page/{id}/product": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Products */
        post: operations["page_addProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Payment Request */
        get: operations["paymentRequest_list"];
        put?: never;
        /** Create Payment Request */
        post: operations["paymentRequest_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Payment Request */
        get: operations["paymentRequest_fetch"];
        /** Update Payment Request */
        put: operations["paymentRequest_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/verify/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Verify Payment Request */
        get: operations["paymentRequest_verify"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/notify/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Notification */
        post: operations["paymentRequest_notify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/totals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Payment Request Total */
        get: operations["paymentRequest_totals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/finalize/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finalize Payment Request */
        post: operations["paymentRequest_finalize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymentrequest/archive/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Archive Payment Request */
        post: operations["paymentRequest_archive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settlement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Settlements */
        get: operations["settlements_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settlement/{id}/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Settlement Transactions */
        get: operations["settlements_transaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transferrecipient": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Transfer Recipients */
        get: operations["transferrecipient_list"];
        put?: never;
        /** Create Transfer Recipient */
        post: operations["transferrecipient_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transferrecipient/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk Create Transfer Recipient */
        post: operations["transferrecipient_bulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transferrecipient/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer recipient code */
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Transfer recipient */
        get: operations["transferrecipient_fetch"];
        /** Update Transfer recipient */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Transfer recipient code */
                    code: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": components["schemas"]["TransferRecipientUpdate"];
                    "application/json": components["schemas"]["TransferRecipientUpdate"];
                };
            };
            responses: {
                200: components["responses"]["Ok"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                /** @description Server error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete Transfer Recipient */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Transfer recipient code */
                    code: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Ok"];
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                /** @description Server error */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Transfers */
        get: operations["transfer_list"];
        put?: never;
        /** Initiate Transfer */
        post: operations["transfer_initiate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/finalize_transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finalize Transfer */
        post: operations["transfer_finalize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate Bulk Transfer */
        post: operations["transfer_bulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer code */
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Transfer */
        get: operations["transfer_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/verify/{reference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verify Transfer */
        get: operations["transfer_verify"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export Transfers */
        get: operations["transfer_download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/resend_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend OTP for Transfer */
        post: operations["transfer_resendOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/disable_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable OTP requirement for Transfers */
        post: operations["transfer_disableOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/disable_otp_finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finalize Disabling of OTP requirement for Transfers */
        post: operations["transfer_disableOtpFinalize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transfer/enable_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable OTP requirement for Transfers */
        post: operations["transfer_enableOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Balance
         * @description You can only transfer from what you have
         */
        get: operations["balance_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/balance/ledger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Balance Ledger */
        get: operations["balance_ledger"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Charge */
        post: operations["charge_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit PIN */
        post: operations["charge_submitPin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit OTP */
        post: operations["charge_submitOtp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Phone */
        post: operations["charge_submitPhone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_birthday": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Birthday */
        post: operations["charge_submitBirthday"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/submit_address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit Address */
        post: operations["charge_submitAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charge/{reference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check pending charge */
        get: operations["charge_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Bulk Charge Batches */
        get: operations["bulkCharge_list"];
        put?: never;
        /** Initiate Bulk Charge */
        post: operations["bulkCharge_initiate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        /** Fetch Bulk Charge Batch */
        get: operations["bulkCharge_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge/{code}/charges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Charges in a Batch */
        get: operations["bulkCharge_charges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge/pause/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pause Bulk Charge Batch */
        get: operations["bulkCharge_pause"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bulkcharge/resume/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resume Bulk Charge Batch */
        get: operations["bulkCharge_resume"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/payment_session_timeout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Payment Session Timeout */
        get: operations["integration_fetchPaymentSessionTimeout"];
        /** Update Payment Session Timeout */
        put: operations["integration_updatePaymentSessionTimeout"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Refunds */
        get: operations["refund_list"];
        put?: never;
        /** Create Refund */
        post: operations["refund_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/refund/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Refund */
        get: operations["refund_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Disputes */
        get: operations["dispute_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        /** Fetch Dispute */
        get: operations["dispute_fetch"];
        /** Update Dispute */
        put: operations["dispute_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/{id}/upload_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Upload URL */
        get: operations["dispute_uploadUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export Disputes */
        get: operations["dispute_download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/transaction/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Transaction Disputes */
        get: operations["dispute_transaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/{id}/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Resolve a Dispute */
        put: operations["dispute_resolve"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dispute/{id}/evidence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Evidence */
        post: operations["dispute_evidence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resolve Account Number */
        get: operations["verification_resolveAccountNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decision/bin/{bin}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resolve Card BIN */
        get: operations["verification_resolveCardBin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/country": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Countries */
        get: operations["verification_listCountries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Banks */
        get: operations["verification_fetchBanks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/address_verification/states": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List States (AVS) */
        get: operations["verification_avs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TransactionInitialize: {
            /** @description Customer's email address */
            email: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount: number;
            /** @description The transaction currency */
            currency?: string;
            /** @description Unique transaction reference. Only -, ., = and alphanumeric characters allowed. */
            reference?: string;
            /** @description Fully qualified url, e.g. https://example.com/ . Use this to override the callback url provided on the dashboard for this transaction */
            callback_url?: string;
            /** @description If transaction is to create a subscription to a predefined plan, provide plan code here.
             *     This would invalidate the value provided in amount */
            plan?: string;
            /** @description Number of times to charge customer during subscription to plan */
            invoice_limit?: number;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
            /** @description An array of payment channels to control what channels you want to make available to the user to make a payment with */
            channels?: string[];
            /** @description The split code of the transaction split */
            split_code?: string;
            /** @description The code for the subaccount that owns the payment */
            subaccount?: string;
            /** @description A flat fee to charge the subaccount for a transaction.
             *     This overrides the split percentage set when the subaccount was created */
            transaction_charge?: string;
            /** @description The beare of the transaction charge */
            bearer?: string;
        };
        TransactionChargeAuthorization: {
            /** @description Customer's email address */
            email: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount: number;
            /** @description Valid authorization code to charge */
            authorization_code: string;
            /** @description Unique transaction reference. Only -, ., = and alphanumeric characters allowed. */
            reference?: string;
            /** @description The transaction currency */
            currency?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
            /** @description The split code of the transaction split */
            split_code?: string;
            /** @description The code for the subaccount that owns the payment */
            subaccount?: string;
            /** @description A flat fee to charge the subaccount for a transaction.
             *     This overrides the split percentage set when the subaccount was created */
            transaction_charge?: string;
            /** @description The beare of the transaction charge */
            bearer?: string;
            /** @description If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors. */
            queue?: boolean;
        };
        TransactionCheckAuthorization: {
            /** @description Customer's email address */
            email: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount: number;
            /** @description Valid authorization code to charge */
            authorization_code?: string;
            /** @description The transaction currency */
            currency?: string;
        };
        TransactionPartialDebit: {
            /** @description Customer's email address */
            email: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount: number;
            /** @description Valid authorization code to charge */
            authorization_code: string;
            /** @description The transaction currency */
            currency: string;
            /** @description Unique transaction reference. Only -, ., = and alphanumeric characters allowed. */
            reference?: string;
            /** @description Minimum amount to charge */
            at_least?: string;
        };
        SplitCreate: {
            /** @description Name of the transaction split */
            name: string;
            /** @description The type of transaction split you want to create. */
            type: string;
            /** @description A list of object containing subaccount code and number of shares */
            subaccounts: components["schemas"]["SplitSubaccounts"][];
            /** @description The transaction currency */
            currency: string;
            /** @description This allows you specify how the transaction charge should be processed */
            bearer_type?: string;
            /** @description This is the subaccount code of the customer or partner that would bear the transaction charge if you specified subaccount as the bearer type */
            bearer_subaccount?: string;
        };
        SplitSubaccounts: {
            /** @description Subaccount code of the customer or partner */
            subaccount?: string;
            /** @description The percentage or flat quota of the customer or partner */
            share?: string;
        };
        SplitUpdate: {
            /** @description Name of the transaction split */
            name?: string;
            /** @description Toggle status of split. When true, the split is active, else it's inactive */
            active?: boolean;
            /** @description This allows you specify how the transaction charge should be processed */
            bearer_type?: string;
            /** @description This is the subaccount code of the customer or partner that would bear the transaction charge if you specified subaccount as the bearer type */
            bearer_subaccount?: string;
        };
        CustomerCreate: {
            /** @description Customer's email address */
            email: string;
            /** @description Customer's first name */
            first_name?: string;
            /** @description Customer's last name */
            last_name?: string;
            /** @description Customer's phone number */
            phone?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        CustomerUpdate: {
            /** @description Customer's first name */
            first_name?: string;
            /** @description Customer's last name */
            last_name?: string;
            /** @description Customer's phone number */
            phone?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        CustomerValidate: {
            /** @description Customer's first name */
            first_name: string;
            /** @description Customer's last name */
            last_name: string;
            /** @description Predefined types of identification. e.g. (BVN) */
            type: string;
            /** @description Customer's identification number */
            value: string;
            /** @description 2 letter country code of identification issuer */
            country: string;
        };
        CustomerRiskAction: {
            /** @description Customer's code, or email address */
            customer: string;
            /** @description One of the possible risk actions [ default, allow, deny ]. allow to whitelist.
             *     deny to blacklist. Customers start with a default risk action.
             *      */
            risk_action?: string;
        };
        CustomerDeactivateAuthorization: {
            /** @description Authorization code to be deactivated */
            authorization_code: string;
        };
        CustomerValidation: {
            /** @description Customer's first name */
            first_name: string;
            /** @description Customer's last name */
            last_name: string;
            /** @description Predefined types of identification. */
            type: string;
            /** @description Two-letter country code of identification issuer */
            country: string;
            /** @description Customer's Bank Verification Number */
            bvn: string;
            /** @description You can get the list of bank codes by calling the List Banks endpoint (https://api.paystack.co/bank). */
            bank_code: string;
            /** @description Customer's bank account number. */
            account_number: string;
            /** @description Customer's identification number. Required if type is bvn */
            value?: string;
        };
        DedicatedVirtualAccountCreate: {
            /** @description Customer ID or code */
            customer: string;
            /** @description The bank slug for preferred bank. To get a list of available banks, use the List Providers endpoint */
            preferred_bank?: string;
            /** @description Subaccount code of the account you want to split the transaction with */
            subaccount?: string;
            /** @description Split code consisting of the lists of accounts you want to split the transaction with */
            split_code?: string;
        };
        DedicatedVirtualAccountSplit: {
            /** @description Valid Dedicated virtual account */
            account_number: string;
            /** @description Subaccount code of the account you want to split the transaction with */
            subaccount?: string;
            /** @description Split code consisting of the lists of accounts you want to split the transaction with */
            split_code?: string;
        };
        SubaccountCreate: {
            /** @description Name of business for subaccount */
            business_name: string;
            /** @description Bank code for the bank. You can get the list of Bank Codes by calling the List Banks endpoint. */
            settlement_bank: string;
            /** @description Bank account number */
            account_number: string;
            /**
             * Format: float
             * @description Customer's phone number
             */
            percentage_charge: number;
            /** @description A description for this subaccount */
            description?: string;
            /** @description A contact email for the subaccount */
            primary_contact_email?: string;
            /** @description The name of the contact person for this subaccount */
            primary_contact_name?: string;
            /** @description A phone number to call for this subaccount */
            primary_contact_phone?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        SubaccountUpdate: {
            /** @description Name of business for subaccount */
            business_name?: string;
            /** @description Bank code for the bank. You can get the list of Bank Codes by calling the List Banks endpoint. */
            settlement_bank?: string;
            /** @description Bank account number */
            account_number?: string;
            /** @description Activate or deactivate a subaccount */
            active?: boolean;
            /**
             * Format: float
             * @description Customer's phone number
             */
            percentage_charge?: number;
            /** @description A description for this subaccount */
            description?: string;
            /** @description A contact email for the subaccount */
            primary_contact_email?: string;
            /** @description The name of the contact person for this subaccount */
            primary_contact_name?: string;
            /** @description A phone number to call for this subaccount */
            primary_contact_phone?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        PlanCreate: {
            /** @description Name of plan */
            name: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount: number;
            /** @description Interval in words. Valid intervals are daily, weekly, monthly,biannually, annually */
            interval: string;
            /** @description A description for this plan */
            description?: string;
            /** @description Set to false if you don't want invoices to be sent to your customers */
            send_invoices?: boolean;
            /** @description Set to false if you don't want text messages to be sent to your customers */
            send_sms?: boolean;
            /** @description Currency in which amount is set. Allowed values are NGN, GHS, ZAR or USD */
            currency?: string;
            /** @description Number of invoices to raise during subscription to this plan.
             *     Can be overridden by specifying an invoice_limit while subscribing. */
            invoice_limit?: number;
        };
        PlanUpdate: {
            /** @description Name of plan */
            name?: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount?: number;
            /** @description Interval in words. Valid intervals are daily, weekly, monthly,biannually, annually */
            interval?: string;
            /** @description A description for this plan */
            description?: boolean;
            /** @description Set to false if you don't want invoices to be sent to your customers */
            send_invoices?: boolean;
            /** @description Set to false if you don't want text messages to be sent to your customers */
            send_sms?: boolean;
            /** @description Currency in which amount is set. Allowed values are NGN, GHS, ZAR or USD */
            currency?: string;
            /** @description Number of invoices to raise during subscription to this plan.
             *     Can be overridden by specifying an invoice_limit while subscribing. */
            invoice_limit?: number;
        };
        SubscriptionCreate: {
            /** @description Customer's email address or customer code */
            customer: string;
            /** @description Plan code */
            plan: string;
            /** @description If customer has multiple authorizations, you can set the desired authorization you wish to use for this subscription here.
             *     If this is not supplied, the customer's most recent authorization would be used */
            authorization?: string;
            /**
             * Format: date-time
             * @description Set the date for the first debit. (ISO 8601 format) e.g. 2017-05-16T00:30:13+01:00
             */
            start_date?: string;
        };
        SubscriptionToggle: {
            /** @description Subscription code */
            code: string;
            /** @description Email token */
            token: string;
        };
        ProductCreate: {
            /** @description Name of product */
            name: string;
            /** @description The description of the product */
            description: string;
            /** @description Price should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            price: number;
            /** @description Currency in which price is set. Allowed values are: NGN, GHS, ZAR or USD */
            currency: string;
            /** @description Set to true if the product has limited stock. Leave as false if the product has unlimited stock */
            limited?: boolean;
            /** @description Number of products in stock. Use if limited is true */
            quantity?: number;
        };
        ProductUpdate: {
            /** @description Name of product */
            name?: string;
            /** @description The description of the product */
            description?: string;
            /** @description Price should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            price?: number;
            /** @description Currency in which price is set. Allowed values are: NGN, GHS, ZAR or USD */
            currency?: string;
            /** @description Set to true if the product has limited stock. Leave as false if the product has unlimited stock */
            limited?: boolean;
            /** @description Number of products in stock. Use if limited is true */
            quantity?: number;
        };
        PageCreate: {
            /** @description Name of page */
            name: string;
            /** @description The description of the page */
            description?: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount?: number;
            /** @description URL slug you would like to be associated with this page. Page will be accessible at https://paystack.com/pay/[slug] */
            slug?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
            /** @description If you would like Paystack to redirect to a URL upon successful payment, specify the URL here. */
            redirect_url?: string;
            /** @description If you would like to accept custom fields, specify them here. */
            custom_fields?: Record<string, never>[];
        };
        PageUpdate: {
            /** @description Name of page */
            name?: string;
            /** @description The description of the page */
            description?: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount?: number;
            /** @description Set to false to deactivate page url */
            active?: boolean;
        };
        PageProduct: {
            /** @description IDs of all products to add to a page */
            product: string[];
        };
        PaymentRequestCreate: {
            /** @description Customer id or code */
            customer: string;
            /** @description Payment request amount. Only useful if line items and tax values are ignored.
             *     The endpoint will throw a friendly warning if neither is available. */
            amount?: number;
            /** @description Specify the currency of the invoice. Allowed values are NGN, GHS, ZAR and USD. Defaults to NGN */
            currency?: string;
            /**
             * Format: date-time
             * @description ISO 8601 representation of request due date
             */
            due_date?: string;
            /** @description A short description of the payment request */
            description?: string;
            /** @description Array of line items */
            line_items?: Record<string, never>[];
            /** @description Array of taxes */
            tax?: Record<string, never>[];
            /** @description Indicates whether Paystack sends an email notification to customer. Defaults to true */
            send_notification?: boolean;
            /** @description Indicate if request should be saved as draft. Defaults to false and overrides send_notification */
            draft?: boolean;
            /** @description Set to true to create a draft invoice (adds an auto incrementing invoice number if none is provided)
             *     even if there are no line_items or tax passed */
            has_invoice?: boolean;
            /** @description Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help
             *     override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. */
            invoice_number?: number;
            /** @description The split code of the transaction split. */
            split_code?: string;
        };
        PaymentRequestUpdate: {
            /** @description Customer id or code */
            customer?: string;
            /** @description Payment request amount. Only useful if line items and tax values are ignored.
             *     The endpoint will throw a friendly warning if neither is available. */
            amount?: number;
            /** @description Specify the currency of the invoice. Allowed values are NGN, GHS, ZAR and USD. Defaults to NGN */
            currency?: string;
            /**
             * Format: date-time
             * @description ISO 8601 representation of request due date
             */
            due_date?: string;
            /** @description A short description of the payment request */
            description?: string;
            /** @description Array of line items */
            line_items?: Record<string, never>[];
            /** @description Array of taxes */
            tax?: Record<string, never>[];
            /** @description Indicates whether Paystack sends an email notification to customer. Defaults to true */
            send_notification?: boolean;
            /** @description Indicate if request should be saved as draft. Defaults to false and overrides send_notification */
            draft?: boolean;
            /** @description Set to true to create a draft invoice (adds an auto incrementing invoice number if none is provided)
             *     even if there are no line_items or tax passed */
            has_invoice?: boolean;
            /** @description Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help
             *     override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point. */
            invoice_number?: number;
            /** @description The split code of the transaction split. */
            split_code?: string;
        };
        TransferRecipientCreate: {
            /** @description Recipient Type (Only nuban at this time) */
            type: string;
            /** @description Recipient's name */
            name: string;
            /** @description Recipient's bank account number */
            account_number: string;
            /** @description Recipient's bank code. You can get the list of Bank Codes by calling the List Banks endpoint */
            bank_code: string;
            /** @description A description for this recipient */
            description?: string;
            /** @description Currency for the account receiving the transfer */
            currency?: string;
            /** @description An authorization code from a previous transaction */
            authorization_code?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        TransferRecipientBulk: {
            /** @description A list of transfer recipient object. Each object should contain type, name, and bank_code.
             *     Any Create Transfer Recipient param can also be passed. */
            batch: components["schemas"]["TransferRecipientCreate"][];
        };
        TransferRecipientUpdate: {
            /** @description Recipient's name */
            name?: string;
            /** @description Recipient's email address */
            email?: string;
        };
        TransferInitiate: {
            /** @description Where should we transfer from? Only balance is allowed for now */
            source: string;
            /** @description Amount to transfer in kobo if currency is NGN and pesewas if currency is GHS. */
            amount: string;
            /** @description The transfer recipient's code */
            recipient: string;
            /** @description The reason or narration for the transfer. */
            reason?: string;
            /** @description Specify the currency of the transfer. Defaults to NGN. */
            currency?: string;
            /** @description If specified, the field should be a unique identifier (in lowercase) for the object.
             *     Only -,_ and alphanumeric characters are allowed. */
            reference?: string;
        };
        TransferFinalize: {
            /** @description The transfer code you want to finalize */
            transfer_code: string;
            /** @description OTP sent to business phone to verify transfer */
            otp: string;
        };
        TransferBulk: {
            /** @description Where should we transfer from? Only balance is allowed for now */
            source?: string;
            /** @description A list of transfer object. Each object should contain amount, recipient, and reference */
            transfers?: components["schemas"]["TransferInitiate"][];
        };
        TransferResendOTP: {
            /** @description The transfer code that requires an OTP validation */
            transfer_code: string;
            /** @description Either resend_otp or transfer */
            reason: string;
        };
        TransferFinalizeDisableOTP: {
            /** @description OTP sent to business phone to verify disabling OTP requirement */
            otp: string;
        };
        ChargeCreate: {
            /** @description Customer's email address */
            email: string;
            /** @description Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            amount: string;
            /** @description An authorization code to charge. */
            authorization_code?: string;
            /** @description 4-digit PIN (send with a non-reusable authorization code) */
            pin?: string;
            /** @description Unique transaction reference. Only -, .`, = and alphanumeric characters allowed. */
            reference?: string;
            /**
             * Format: date-time
             * @description The customer's birthday in the format YYYY-MM-DD e.g 2017-05-16
             */
            birthday?: string;
            /** @description This is the unique identifier of the device a user uses in making payment.
             *     Only -, .`, = and alphanumeric characters are allowed. */
            device_id?: string;
            /** @description Stringified JSON object of custom data */
            metadata?: string;
        };
        ChargeSubmitPin: {
            /** @description Customer's PIN */
            pin: string;
            /** @description Transaction reference that requires the PIN */
            reference: string;
        };
        ChargeSubmitOTP: {
            /** @description Customer's OTP */
            otp: string;
            /** @description The reference of the ongoing transaction */
            reference: string;
        };
        ChargeSubmitPhone: {
            /** @description Customer's mobile number */
            phone: string;
            /** @description The reference of the ongoing transaction */
            reference: string;
        };
        ChargeSubmitBirthday: {
            /** @description Customer's birthday in the format YYYY-MM-DD e.g 2016-09-21 */
            birthday: string;
            /** @description The reference of the ongoing transaction */
            reference: string;
        };
        ChargeSubmitAddress: {
            /** @description Customer's address */
            address: string;
            /** @description Customer's city */
            city: string;
            /** @description Customer's state */
            state: string;
            /** @description Customer's zipcode */
            zipcode: string;
            /** @description The reference of the ongoing transaction */
            reference: string;
        };
        BulkChargeInitiate: {
            /** @description Customer's card authorization code */
            authorization: string;
            /** @description Amount to charge on the authorization */
            amount: string;
        };
        RefundCreate: {
            /** @description Transaction reference or id */
            transaction: string;
            /** @description Amount ( in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR ) to be refunded to the customer.
             *     Amount cannot be more than the original transaction amount */
            amount?: number;
            /** @description Three-letter ISO currency. Allowed values are NGN, GHS, ZAR or USD */
            currency?: string;
            /** @description Customer reason */
            customer_note?: string;
            /** @description Merchant reason */
            merchant_note?: string;
        };
        DisputeEvidence: {
            /** @description Customer email */
            customer_email: string;
            /** @description Customer name */
            customer_name: string;
            /** @description Customer mobile number */
            customer_phone: string;
            /** @description Details of service offered */
            service_details: string;
            /** @description Delivery address */
            delivery_address?: string;
            /**
             * Format: date-time
             * @description ISO 8601 representation of delivery date (YYYY-MM-DD)
             */
            delivery_date?: string;
        };
        DisputeUpdate: {
            /** @description The amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            refund_amount: string;
            /** @description Filename of attachment returned via response from the Dispute upload URL */
            uploaded_filename?: string;
        };
        DisputeResolve: {
            /** @description Dispute resolution. Accepted values, merchant-accepted, declined */
            resolution: string;
            /** @description Reason for resolving */
            message: string;
            /** @description The amount to refund, in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR */
            refund_amount: string;
            /** @description Filename of attachment returned via response from the Dispute upload URL */
            uploaded_filename: string;
            /** @description Evidence Id for fraud claims */
            evidence?: number;
        };
        VerificationBVNMatch: {
            /** @description Bank Account Number */
            account_number: string;
            /** @description You can get the list of banks codes by calling the List Bank endpoint */
            bank_code: number;
            /** @description 11 digits Bank Verification Number */
            bvn: string;
            /** @description Customer's first name */
            first_name?: string;
            /** @description Customer's middle name */
            middle_name?: string;
            /** @description Customer's last name */
            last_name?: string;
        };
        Bank: {
            /** @description Customer's bank code */
            code?: string;
            /** @description Customer's account number */
            account_number?: string;
        };
        USSD: {
            /** @description The three-digit USSD code. One of, 737, 919, 822, 966 */
            type?: string;
        };
        MobileMoney: {
            /** @description Customer's phone number */
            phone?: string;
            /** @description The telco provider of customer's phone number. This can be fetched from the List Bank endpoint */
            provider?: string;
        };
        EFT: {
            /** @description The EFT provider */
            provider?: string;
        };
        Error: {
            status?: boolean;
            message?: string;
        };
        Response: {
            status?: boolean;
            message?: string;
            data?: Record<string, never>;
        };
        Accepted: {
            status?: boolean;
            message?: string;
        };
    };
    responses: {
        /** @description Request successful */
        Ok: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Response"];
            };
        };
        /** @description Request accepted for processing */
        Accepted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Accepted"];
            };
        };
        /** @description Resource created */
        Created: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Response"];
            };
        };
        /** @description Entity not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "status": false,
                 *       "message": "Entity not found"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized operation */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "status": false,
                 *       "message": "Invalid key"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description General Error */
        GeneralError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    transaction_initialize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransactionInitialize"];
                "application/json": components["schemas"]["TransactionInitialize"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_verify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The transaction reference to verify */
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the transaction to fetch */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_timeline: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id_or_reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_totals: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_download: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_chargeAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransactionChargeAuthorization"];
                "application/json": components["schemas"]["TransactionChargeAuthorization"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_checkAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransactionCheckAuthorization"];
                "application/json": components["schemas"]["TransactionCheckAuthorization"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_partialDebit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransactionPartialDebit"];
                "application/json": components["schemas"]["TransactionPartialDebit"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_event: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transaction_session: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_list: {
        parameters: {
            query?: {
                name?: string;
                active?: string;
                sort_by?: string;
                from?: string;
                to?: string;
                perPage?: string;
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SplitCreate"];
                "application/json": components["schemas"]["SplitCreate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SplitUpdate"];
                "application/json": components["schemas"]["SplitUpdate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_addSubaccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example application/json */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SplitSubaccounts"];
                "application/json": components["schemas"]["SplitSubaccounts"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    split_removeSubaccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SplitSubaccounts"];
                "application/json": components["schemas"]["SplitSubaccounts"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_list: {
        parameters: {
            query?: {
                use_cursor?: boolean;
                next?: string;
                previous?: string;
                from?: string;
                to?: string;
                perPage?: string;
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["CustomerCreate"];
                "application/json": components["schemas"]["CustomerCreate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["CustomerUpdate"];
                "application/json": components["schemas"]["CustomerUpdate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_riskAction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["CustomerRiskAction"];
                "application/json": components["schemas"]["CustomerRiskAction"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_deactivateAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["CustomerDeactivateAuthorization"];
                "application/json": components["schemas"]["CustomerDeactivateAuthorization"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    customer_validate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["CustomerValidation"];
                "application/json": components["schemas"]["CustomerValidation"];
            };
        };
        responses: {
            202: components["responses"]["Accepted"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_list: {
        parameters: {
            query?: {
                account_number?: string;
                customer?: string;
                active?: boolean;
                currency?: string;
                provider_slug?: string;
                bank_id?: string;
                perPage?: string;
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["DedicatedVirtualAccountCreate"];
                "application/json": components["schemas"]["DedicatedVirtualAccountCreate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_deactivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_availableProviders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_addSplit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["DedicatedVirtualAccountSplit"];
                "application/json": components["schemas"]["DedicatedVirtualAccountSplit"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dedicatedAccount_removeSplit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["DedicatedVirtualAccountSplit"];
                "application/json": components["schemas"]["DedicatedVirtualAccountSplit"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subaccount_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subaccount_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SubaccountCreate"];
                "application/json": components["schemas"]["SubaccountCreate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subaccount_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subaccount_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SubaccountUpdate"];
                "application/json": components["schemas"]["SubaccountUpdate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    plan_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description Specify interval of the plan */
                interval?: string;
                /** @description The amount on the plans to retrieve */
                amount?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    plan_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PlanCreate"];
                "application/json": components["schemas"]["PlanCreate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    plan_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    plan_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PlanUpdate"];
                "application/json": components["schemas"]["PlanUpdate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description Plan ID */
                plan?: string;
                /** @description Customer ID */
                customer?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionCreate"];
                "application/json": components["schemas"]["SubscriptionCreate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_disable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionToggle"];
                "application/json": components["schemas"]["SubscriptionToggle"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_enable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["SubscriptionToggle"];
                "application/json": components["schemas"]["SubscriptionToggle"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_manageLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subscription_manageEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_list: {
        parameters: {
            query?: {
                perPage?: number;
                page?: number;
                active?: boolean;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ProductCreate"];
                "application/json": components["schemas"]["ProductCreate"];
            };
        };
        responses: {
            201: components["responses"]["Created"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ProductUpdate"];
                "application/json": components["schemas"]["ProductUpdate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    product_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PageCreate"];
                "application/json": components["schemas"]["PageCreate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PageUpdate"];
                "application/json": components["schemas"]["PageUpdate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_checkSlugAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    page_addProducts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PageProduct"];
                "application/json": components["schemas"]["PageProduct"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description Customer ID */
                customer?: string;
                /** @description Invoice status to filter */
                status?: string;
                /** @description If your integration supports more than one currency, choose the one to filter */
                currency?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequestCreate"];
                "application/json": components["schemas"]["PaymentRequestCreate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequestUpdate"];
                "application/json": components["schemas"]["PaymentRequestUpdate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_verify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_notify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_totals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_finalize: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    paymentRequest_archive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    settlements_fetch: {
        parameters: {
            query?: {
                /** @example 50 */
                perPage?: number;
                /** @example 2 */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    settlements_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransferRecipientCreate"];
                "application/json": components["schemas"]["TransferRecipientCreate"];
            };
        };
        responses: {
            201: components["responses"]["Created"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_bulk: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransferRecipientBulk"];
                "application/json": components["schemas"]["TransferRecipientBulk"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transferrecipient_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer recipient code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                status?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_initiate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransferInitiate"];
                "application/json": components["schemas"]["TransferInitiate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_finalize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransferFinalize"];
                "application/json": components["schemas"]["TransferFinalize"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_bulk: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransferBulk"];
                "application/json": components["schemas"]["TransferBulk"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transfer code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_verify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_download: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                status?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_resendOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransferResendOTP"];
                "application/json": components["schemas"]["TransferResendOTP"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_disableOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_disableOtpFinalize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TransferFinalizeDisableOTP"];
                "application/json": components["schemas"]["TransferFinalizeDisableOTP"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    transfer_enableOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    balance_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    balance_ledger: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ChargeCreate"] & {
                    bank?: components["schemas"]["Bank"];
                } & {
                    mobile_money?: components["schemas"]["MobileMoney"];
                } & {
                    ussd?: components["schemas"]["USSD"];
                } & {
                    eft?: components["schemas"]["EFT"];
                };
                "application/json": components["schemas"]["ChargeCreate"] & {
                    bank?: components["schemas"]["Bank"];
                } & {
                    mobile_money?: components["schemas"]["MobileMoney"];
                } & {
                    ussd?: components["schemas"]["USSD"];
                } & {
                    eft?: components["schemas"]["EFT"];
                };
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitPin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitPin"];
                "application/json": components["schemas"]["ChargeSubmitPin"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitOtp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitOTP"];
                "application/json": components["schemas"]["ChargeSubmitOTP"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitPhone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitPhone"];
                "application/json": components["schemas"]["ChargeSubmitPhone"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitBirthday: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitBirthday"];
                "application/json": components["schemas"]["ChargeSubmitBirthday"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_submitAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ChargeSubmitAddress"];
                "application/json": components["schemas"]["ChargeSubmitAddress"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    charge_check: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_initiate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    charges?: Record<string, never>;
                }[];
                "application/json": {
                    /** charges */
                    charges?: Record<string, never>;
                }[];
            };
        };
        responses: {
            200: components["responses"]["Created"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_charges: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_pause: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    bulkCharge_resume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Batch code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    integration_fetchPaymentSessionTimeout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    integration_updatePaymentSessionTimeout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refund_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refund_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["RefundCreate"];
                "application/json": components["schemas"]["RefundCreate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refund_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_list: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                /** @description Dispute Status. Acceptable values are awaiting-merchant-feedback, awaiting-bank-feedback, pending, resolved */
                status?: string;
                /** @description Transaction ID */
                transaction?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["DisputeUpdate"];
                "application/json": components["schemas"]["DisputeUpdate"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_uploadUrl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_download: {
        parameters: {
            query?: {
                /** @description Number of records to fetch per page */
                perPage?: number;
                /** @description The section to retrieve */
                page?: number;
                status?: string;
                /** @description The start date */
                from?: string;
                /** @description The end date */
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_resolve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["DisputeResolve"];
                "application/json": components["schemas"]["DisputeResolve"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    dispute_evidence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["DisputeEvidence"];
                "application/json": components["schemas"]["DisputeEvidence"];
            };
        };
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verification_resolveAccountNumber: {
        parameters: {
            query?: {
                /** @example 22728151 */
                account_number?: number;
                /** @example 63 */
                bank_code?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verification_resolveCardBin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bin: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verification_listCountries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verification_fetchBanks: {
        parameters: {
            query?: {
                country?: string;
                pay_with_bank_transfer?: boolean;
                use_cursor?: boolean;
                perPage?: number;
                next?: string;
                previous?: string;
                gateway?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verification_avs: {
        parameters: {
            query?: {
                type?: string;
                country?: string;
                currency?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ok"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            /** @description Server error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
